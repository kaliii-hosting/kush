rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user is admin
    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Helper function to check if user is sales rep
    function isSalesRep() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'salesRep';
    }
    
    // Users collection rules
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && (isAdmin() || isSalesRep() || request.auth.uid == userId);
      allow update: if isAuthenticated() && (isAdmin() || request.auth.uid == userId);
      allow delete: if isAdmin();
      
      // User's cart subcollection
      match /carts/{cartId} {
        allow read: if isAuthenticated() && request.auth.uid == userId;
        allow write: if isAuthenticated() && request.auth.uid == userId;
      }
    }
    
    // Products collection rules
    match /products/{productId} {
      allow read: if true; // Public read access
      allow write: if isAdmin();
    }
    
    // Invoices collection rules
    match /invoices/{invoiceId} {
      // Allow read if user is admin or the creator of the invoice
      // Note: resource.data check is skipped if document doesn't exist
      allow read: if isAuthenticated() && 
        (isAdmin() || (resource != null && resource.data.createdBy == request.auth.uid));
      
      // Allow list/query if user is authenticated (will be filtered by query)
      allow list: if isAuthenticated();
      
      // Allow create if user is authenticated and sets their own uid as createdBy
      allow create: if isAuthenticated() && 
        request.resource.data.createdBy == request.auth.uid;
      
      // Allow update if user is admin or the creator
      allow update: if isAuthenticated() && 
        (isAdmin() || resource.data.createdBy == request.auth.uid);
      
      // Only admin can delete
      allow delete: if isAdmin();
    }
    
    // Orders collection rules
    match /orders/{orderId} {
      // Allow read if user is admin, sales rep, or the customer
      allow read: if isAuthenticated() && 
        (isAdmin() || isSalesRep() || resource.data.customerId == request.auth.uid);
      
      // Allow create if user is authenticated
      allow create: if isAuthenticated();
      
      // Allow update if user is admin or sales rep
      allow update: if isAuthenticated() && (isAdmin() || isSalesRep());
      
      // Only admin can delete
      allow delete: if isAdmin();
    }
    
    // Allow read/write access to other collections for authenticated users
    match /{document=**} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
  }
}